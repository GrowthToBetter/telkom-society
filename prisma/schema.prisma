generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid()) @map("user_id") @db.Char(36)
  email         String        @unique
  photo_profile String?
  name          String
  clasess       String?
  absent        String?
  Phone         String?
  NIS           String?
  NISN          String?
  schoolOrigin  String?
  role          Role          @default(SISWA)
  job           Job           @default(Undefined)
  biography     String?
  status        Status        @default(Dont_Have_Team)
  linkedin      String?
  github        String?
  instagram     String?
  website       String?
  whatsapp      String?
  BirthDate     String?
  religion      Religion?     @default(Islam)
  gender        Gender?       @default(Male)
  userAuth      UserAuth?
  certificates  certificate[] @relation("CertificateToUser")
  projects      Project[]     @relation("ProjectToUser")
  Skills        Skill[]       @relation("SkillToUser")
  Team          TeamMember?
  teamRequest   TeamRequest[] @relation("RequestSender")
  invitation    TeamRequest[] @relation("RequestReceiver")
}

model UserAuth {
  id         String    @id @default(uuid()) @map("userauth_id") @db.Char(36)
  password   String?
  last_login DateTime?
  userEmail  String    @unique
  user       User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model Team {
  id          String        @id @default(uuid())
  name        String
  description String
  logo        String?
  mentor      String
  instagram   String?
  linkedin    String?
  ownerId     String
  member      TeamMember[]
  requests    TeamRequest[]
  createAt    DateTime      @default(now())
}

model TeamMember {
  id       String   @id @default(uuid())
  teamId   String
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     TeamRole
  joinedAt DateTime @default(now())

  @@unique([userId])
}

model TeamRequest {
  id         String         @id @default(uuid())
  teamId     String
  senderId   String
  receiverId String
  team       Team?          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  sender     User           @relation("RequestSender", fields: [senderId], references: [id])
  receiver   User           @relation("RequestReceiver", fields: [receiverId], references: [id])
  type       InvitationType
  status     RequestStatus  @default(PENDING)
  createAt   DateTime       @default(now())
}

model Skill {
  SkillName String @id @unique
  users     User[] @relation("SkillToUser")
}

model Project {
  ProjeectName String  @id @unique
  link         String?
  members      User[]  @relation("ProjectToUser")
}

model certificate {
  CertificateName String  @id @unique
  img             String
  link            String?
  user            User[]  @relation("CertificateToUser")
}

enum Job {
  Undefined
  Hustler
  Hipster
  Hacker
}

enum Role {
  SISWA
  GURU
  ADMIN
}

enum Status {
  Have_Team
  Dont_Have_Team
}

enum Gender {
  Male
  Female
}

enum Religion {
  Islam
  Kristen_Protestan
  Kristen_Katolik
  Budha
  Hindu
  Konghucu
}

enum RequestStatus {
  PENDING
  VERIFIED
  DENIED
}

enum InvitationType {
  INVITE
  REQUEST
}

enum TeamRole {
  OWNER
  MEMBER
}
